#include <avr/io.h>
#define F_CPU 11059200UL
#include <util/delay.h>
#define RS 7 // выбор регистра
#define E 6 // строб передачи
#define asterisk 10
#define grid 11
#define noKey 13

void LCD_cmd(uint8_t cmd) {
	//[]--------------------------------------------------[]
	//| Назначение: запись кодов в регистр команд ЖКИ |
	//| Входные параметры: cmd - код команды |
	//[]--------------------------------------------------[]
	DDRC = 0xFF; // все разряды PORTC на выход
	DDRD |= ((1<<E)|(1<<RS));// разряды PORTD на выход
	PORTD &= ~(1<<RS); // выбор регистра команд RS=0
	PORTC = cmd; // записать команду в порт PORTC
	PORTD |= (1<<E); // \ сформировать на
	_delay_us(5); // | выводе E строб 1-0
	PORTD &= ~(1<<E);// / передачи команды
	_delay_ms(100); // задержка для завершения записи
}
void LCD_data(uint8_t data) {
	//[]--------------------------------------------------[]
	//| Назначение: вывод символа на ЖКИ |
	//| Входные параметры: data - ASCII-код символа |
	//[]--------------------------------------------------[]
	DDRC = 0xFF; // все разряды PORTC на выход
	DDRD |= ((1<<E)|(1<<RS));// разряды PORTD на выход
	PORTD |= (1<<RS); // выбор регистра команд RS=1
	PORTC = data; // записать данных в порт PORTC
	PORTD |= (1<<E); // \ сформировать на
	_delay_us(5); // | выводе E строб 1-0
	PORTD &= ~(1<<E);// / передачи команды
	_delay_ms(100); // задержка для завершения записи
}
void LCD_init(void) {
	//[]--------------------------------------------------[]
	//| Назначение: инициализация ЖКИ |
	//[]--------------------------------------------------[]
	DDRC = 0xFF; // все разряды PORTC на выход
	DDRD |= ((1<<E)|(1<<RS)); // разряды PORTD на выход
	_delay_ms (100); // задержка для установления напряжения питания
	LCD_cmd(0x30); // \ вывод
	LCD_cmd(0x30); // | трех
	LCD_cmd(0x30); // / команд 0x30
	LCD_cmd(0x38); // 8 разр.шина, 2 строки, 5 ? 7 точек
	LCD_cmd(0x0E); // включить ЖКИ и курсор, без мерцания
	LCD_cmd(0x06); // инкремент курсора, без сдвига экрана
	LCD_cmd(0x01); // очистить экран, курсор в начало
}
void int_to_char (uint16_t a) {
	//[]---------------------------------------------------[]
	//| Назначение: перевод целого числа в массив типа char |
	//| a - целое десятичное число |
	//| Функция выводит на дисплей число a |
	//[]---------------------------------------------------[]
	if (a==0) LCD_data('0'); // проверка на ноль
	else{
		char str[5];
		int8_t i=0; // счётчик цифр в числе a
		while (a>0)
		{
			str[i] = a%10 +'0'; // выделение последней цифры в числе
			a/=10; // отброс последней циры
			i++;
		}
		i--;
		for (;i>=0; i--) LCD_data(str[i]); // Вывод числа a
	}
}
uint8_t key_scan ()
{
	uint8_t key[3][4]= {{1, 4, 7, asterisk}, {2, 5, 8, 0}, {3, 6, 9, grid}};
	DDRD |= (1<<2) | (1<<1) | 1;
	//DDRA |=0x0F; 
	DDRA|=0;
	for (uint8_t i=0; i<3; i++) // цикл по столбцам клавиатуры
	{
		PORTD = 1<<i;
		_delay_ms (50); 
		for (uint8_t j=0; j<4;j++) // цикл по строчкам клваиатуры
		{
			if ((PINA & (1<<j)) != 0) // проверка на наличие сигнала
			{
				_delay_ms(31); // устранение дребезга
				if ((PINA & (1<<j)) != 0) return (key[2-i][j]); // проверка на наличие сигнала
			}
		}
	}
	return (noKey);
}

uint16_t my_pow (uint8_t t, uint8_t k){
    //[]----------------------------------------[]
	//| Назначение: возводит число t в степень k |
	//| Вход: t,k - целое десятичное число |
	//| Выход: p - целое десятичное число |
	//[]----------------------------------------[]
	uint16_t p=1;
	for (uint8_t i=0; i<k;i++) p*=t;
	return (p);
}
uint16_t flip (uint16_t a, uint8_t i){
	//[]----------------------------------------[]
	//| Назначение: переворачивает число относительно центра |
	//| Вход: a - число, которое необходимое перевенуть |
	//|		  i - количество цифр в числе а |
	//| Выход: перевёрнутое число относительно центра|
	uint16_t flip_a=0;
	for (;i>0; i--) // цикл по цифрам числа а
	{
		flip_a += (a%10)*my_pow(10, i); // выделение последней цифры числа а и запись на соотвествующее место в число flip_a
		a /= 10; // отброс последней цифры
	}
	flip_a/=10;
	return (flip_a);
}
uint16_t vvod (uint8_t stop)
{
	//[]----------------------------------------------------[]
	//| Назначение: чтение цифр с клавиатуры |
	//| Вход: stop - значение, после которого прекратить считывание |
	//| Выход: число, введенное с клавиатуры|
	//[]----------------------------------------------------[]
	uint8_t i=0,a; // i - количество цифр в числе, a - ввёденная цифра
	uint16_t x=0; // число, введённое с клавиатуры
	while (1) // цикл опроса клавиатуры
	{
		do
		{
			a=key_scan();
		} while (a==noKey);
		if (a == stop) break; // проверка на стоп символ
		int_to_char(a); // вывод на дисплей цифры
		x+= a*my_pow(10,i); // расчёт числа
		i++;
	}
	x=flip(x,i); // переворот числа
	_delay_ms(2);
	LCD_cmd(0x01); // очистка экрана
	return (x);
}
void vyvod (uint16_t x, uint16_t y, uint16_t s)
{
	//[]------------------------------------------------[]
	//| Назначение: вывод на дисплей результата операции |
	//[]------------------------------------------------[]
	int_to_char(x); // вывод первого числа
	LCD_data('<');  // вывод знака операции
	LCD_data ('<');
	int_to_char(y); // вывод второго числа 
	LCD_data('=');
	int_to_char(s); // вывод результата
}

int main(void)
{
	uint16_t x, y,s;
	LCD_init(); // инициализация дисплея
	while(1)
	{
		x=vvod (asterisk); // чтение первого числа
		y=vvod (grid); // чтение второго числа
		s = (x<<y); // побитовый сдвиг влево числа x на y
		vyvod (x,y,s); // вывод на экран результата
		_delay_ms(1000);
		LCD_cmd(0x01); // очистить экран
	}
}